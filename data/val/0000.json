{
    "problem_id": 3752,
    "question": "The Binomial Form of a polynomial has many uses, just as the standard form does.  For comparison, if p(x) is in Binomial Form and q(x) is in standard form, we might write\n\np(x) := a0 \\* xC0 + a1 \\* xC1 + a2 \\* xC2 + ... + aN \\* xCN\n\nq(x) := b0 + b1 \\* x + b2 \\* x^(2) + ... + bN \\* x^(N)\n\nBoth forms have tricks for evaluating them, but tricks should not be necessary.  The most important thing to keep in mind is that aCb can be defined for non-integer values of a; in particular,\n\n```\naCb := a * (a-1) * (a-2) * ... * (a-b+1) / b!   // for any value a and integer values b\n    := a! / ((a-b)!b!)                          // for integer values a,b\n```\n\nThe inputs to your function are an array which specifies a polynomial in Binomial Form, ordered by highest-degree-first, and also a number to evaluate the polynomial at.  An example call might be\n\n```python\nvalue_at([1, 2, 7], 3)\n```\n\nand the return value would be 16, since 3C2 + 2 * 3C1 + 7 = 16.  In more detail, this calculation looks like\n\n```\n1 * xC2 + 2 * xC1 + 7 * xC0 :: x = 3\n3C2 + 2 * 3C1 + 7\n3 * (3-1) / 2! + 2 * 3 / 1! + 7\n3 + 6 + 7 = 16\n```\n\nMore information can be found by reading about [Binomial Coefficients](https://en.wikipedia.org/wiki/Binomial_coefficient) or about [Finite Differences](https://en.wikipedia.org/wiki/Finite_difference).\n\nNote that while a solution should be able to handle non-integer inputs and get a correct result, any solution should make use of rounding to two significant digits (as the official solution does) since high precision for non-integers is not the point here.",
    "input_output": {
        "fn_name": "value_at",
        "inputs": [
            [
                [
                    1,
                    2,
                    7
                ],
                3
            ],
            [
                [
                    1,
                    2,
                    7,
                    0,
                    5
                ],
                2
            ],
            [
                [
                    1,
                    1,
                    1,
                    1,
                    7,
                    0,
                    5
                ],
                2
            ],
            [
                [
                    1,
                    2,
                    7,
                    0,
                    5
                ],
                0.6
            ]
        ],
        "outputs": [
            [
                16
            ],
            [
                12
            ],
            [
                12
            ],
            [
                4.24
            ]
        ]
    },
    "url": "https://www.codewars.com/kata/56782b25c05cad45f700000f",
    "difficulty": "introductory",
    "starter_code": "def value_at(poly_spec, x):\n\t",
    "test_cases": {
        "fn_name": "value_at",
        "inputs": [
            [
                [
                    1,
                    2,
                    7,
                    0,
                    5
                ],
                0
            ]
        ],
        "outputs": [
            [
                5.0
            ]
        ]
    }
}