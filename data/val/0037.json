{
    "problem_id": 3927,
    "question": "Some numbers have funny properties. For example:\n\n> 89 --> 8\u00b9 + 9\u00b2 = 89 * 1\n\n> 695 --> 6\u00b2 + 9\u00b3 + 5\u2074= 1390 = 695 * 2\n\n> 46288 --> 4\u00b3 + 6\u2074+ 2\u2075 + 8\u2076 + 8\u2077 = 2360688 = 46288 * 51\n\nGiven a positive integer n written as abcd... (a, b, c, d... being digits) and a positive integer p \n- we want to find a positive integer k, if it exists, such as the sum of the digits of n taken to the successive powers of p is equal to k * n. \n\nIn other words:\n\n> Is there an integer k such as : (a ^ p + b ^ (p+1) + c ^(p+2) + d ^ (p+3) + ...) = n * k\n\nIf it is the case we will return k, if not return -1.\n\n**Note**: n and p will always be given as strictly positive integers.\n\n```python\ndig_pow(89, 1) should return 1 since 8\u00b9 + 9\u00b2 = 89 = 89 * 1\ndig_pow(92, 1) should return -1 since there is no k such as 9\u00b9 + 2\u00b2 equals 92 * k\ndig_pow(695, 2) should return 2 since 6\u00b2 + 9\u00b3 + 5\u2074= 1390 = 695 * 2\ndig_pow(46288, 3) should return 51 since 4\u00b3 + 6\u2074+ 2\u2075 + 8\u2076 + 8\u2077 = 2360688 = 46288 * 51\n```",
    "input_output": {
        "fn_name": "dig_pow",
        "inputs": [
            [
                89,
                1
            ],
            [
                92,
                1
            ],
            [
                46288,
                3
            ],
            [
                114,
                3
            ],
            [
                46288,
                5
            ],
            [
                135,
                1
            ],
            [
                175,
                1
            ],
            [
                518,
                1
            ],
            [
                598,
                1
            ],
            [
                1306,
                1
            ],
            [
                2427,
                1
            ],
            [
                2646798,
                1
            ],
            [
                3456789,
                1
            ],
            [
                3456789,
                5
            ],
            [
                198,
                1
            ],
            [
                249,
                1
            ],
            [
                1377,
                1
            ],
            [
                1676,
                1
            ],
            [
                695,
                2
            ],
            [
                1878,
                2
            ],
            [
                7388,
                2
            ],
            [
                47016,
                2
            ],
            [
                542186,
                2
            ],
            [
                261,
                3
            ],
            [
                1385,
                3
            ],
            [
                2697,
                3
            ],
            [
                6376,
                3
            ],
            [
                6714,
                3
            ],
            [
                63760,
                3
            ]
        ],
        "outputs": [
            [
                1
            ],
            [
                -1
            ],
            [
                51
            ],
            [
                9
            ],
            [
                -1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                1
            ],
            [
                -1
            ],
            [
                -1
            ],
            [
                3
            ],
            [
                3
            ],
            [
                2
            ],
            [
                1
            ],
            [
                2
            ],
            [
                19
            ],
            [
                5
            ],
            [
                1
            ],
            [
                1
            ],
            [
                5
            ],
            [
                35
            ],
            [
                66
            ],
            [
                10
            ],
            [
                1
            ],
            [
                1
            ]
        ]
    },
    "url": "https://www.codewars.com/kata/5552101f47fc5178b1000050",
    "difficulty": "introductory",
    "starter_code": "def dig_pow(n, p):\n\t",
    "test_cases": {
        "fn_name": "dig_pow",
        "inputs": [
            [
                63761,
                3
            ],
            [
                132921,
                3
            ],
            [
                10383,
                6
            ]
        ],
        "outputs": [
            [
                1
            ],
            [
                4
            ],
            [
                12933
            ]
        ]
    }
}