{
    "problem_id": 4044,
    "question": "Let's say take 2 strings, A and B, and define the similarity of the strings to be the length of the longest prefix common to both strings. For example, the similarity of strings `abc` and `abd` is 2, while the similarity of strings `aaa` and `aaab` is 3.\n\nwrite a function that calculates the sum of similarities of a string S with each of it's **suffixes**.\n\n```python\nstring_suffix('ababaa') => returns 11\nstring_suffix('abc') => returns 3\n```\n\nExplanation:\n\nIn the first case, the suffixes of the string are `ababaa`, `babaa`, `abaa`, `baa`, `aa` and `a`. The similarities of each of these strings with the string `ababaa` are 6,0,3,0,1,1 respectively. Thus the answer is 6 + 0 + 3 + 0 + 1 + 1 = 11.\n\nFor the second case, the answer is simply 3 + 0 + 0 = 3.\n\nNote : Each string will have at least one character - no need to check for empty strings :)",
    "input_output": {
        "fn_name": "string_suffix",
        "inputs": [
            [
                "aa"
            ],
            [
                "abc"
            ],
            [
                "ababaa"
            ],
            [
                "aaaa"
            ],
            [
                "aaaaa"
            ],
            [
                "aaaaaa"
            ],
            [
                "mnsomn"
            ],
            [
                "apple"
            ],
            [
                "a"
            ]
        ],
        "outputs": [
            [
                3
            ],
            [
                3
            ],
            [
                11
            ],
            [
                10
            ],
            [
                15
            ],
            [
                21
            ],
            [
                8
            ],
            [
                5
            ],
            [
                1
            ]
        ]
    },
    "url": "https://www.codewars.com/kata/559d34cb2e65e765b90000f0",
    "difficulty": "introductory",
    "starter_code": "def string_suffix(s):\n\t",
    "test_cases": {
        "fn_name": "string_suffix",
        "inputs": [
            [
                "pippi"
            ]
        ],
        "outputs": [
            [
                8
            ]
        ]
    }
}