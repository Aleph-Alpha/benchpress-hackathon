{
    "problem_id": 3635,
    "question": "Every  positive integer number, that is not prime, may be decomposed in prime factors. For example the prime factors of 20, are:\n```\n2, 2, and 5, because: 20 = 2 . 2 . 5\n```\nThe first prime factor (the smallest one) of ```20``` is ```2``` and the last one (the largest one) is ```5```. The sum of the first and the last prime factors, ```sflpf``` of 20 is: ```sflpf = 2 + 5 = 7```\n\nThe number ```998 ```is the only integer in the range ```[4, 1000]``` that has a value of ```501``` , so its ```sflpf``` equals to 501, but in the range ```[4, 5000]``` we will have more integers with ```sflpf = 501``` and are: ```998, 1996, 2994, 3992, 4990```.\n\nWe need a function ```sflpf_data()``` (javascript: ```sflpfData()```that receives two arguments, ```val``` as the value of sflpf and ```nMax``` as a limit, and the function will output a sorted list of the numbers between ```4``` to ```nMax```(included) that have the same value of sflpf equals to ```val```.\n\nLet's see some cases:\n```python\nsflpf_data(10, 100) == [21, 25, 63]\n/// the prime factorization of these numbers are:\nNumber  Prime Factorization     Sum First and Last Prime Factor\n21       = 3 . 7      ---->                 3 + 7 = 10\n25       = 5 . 5      ---->                 5 + 5 = 10\n63       = 3 . 3 . 7  ---->                 3 + 7 = 10\n```\n```python\nsflpf_data(10, 200) == [21, 25, 63, 105, 125, 147, 189]\nsflpf_data(15, 150) == [26, 52, 78, 104, 130]\n```\n(Advice:Try to discard primes in a fast way to have a more agile code)\n\nEnjoy it!",
    "input_output": {
        "fn_name": "sflpf_data",
        "inputs": [
            [
                10,
                100
            ],
            [
                10,
                200
            ],
            [
                15,
                150
            ],
            [
                501,
                1000
            ]
        ],
        "outputs": [
            [
                [
                    21,
                    25,
                    63
                ]
            ],
            [
                [
                    21,
                    25,
                    63,
                    105,
                    125,
                    147,
                    189
                ]
            ],
            [
                [
                    26,
                    52,
                    78,
                    104,
                    130
                ]
            ],
            [
                [
                    998
                ]
            ]
        ]
    },
    "url": "https://www.codewars.com/kata/5629b94e34e04f8fb200008e",
    "difficulty": "introductory",
    "starter_code": "def sflpf_data(val, nMax):\n\t",
    "test_cases": {
        "fn_name": "sflpf_data",
        "inputs": [
            [
                501,
                5000
            ]
        ],
        "outputs": [
            [
                [
                    998,
                    1996,
                    2994,
                    3992,
                    4990
                ]
            ]
        ]
    }
}