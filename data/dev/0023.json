{
    "problem_id": 4730,
    "question": "We need a function ```prime_bef_aft()``` that gives the largest prime below a certain given value ```n```, \n\n```befPrime or bef_prime``` (depending on the language), \n\nand the smallest prime larger than this value, \n\n```aftPrime/aft_prime``` (depending on the language).\n\nThe result should be output in a list like the following:\n\n```python\nprime_bef_aft(n) == [befPrime, aftPrime]\n```\n\nIf n is a prime number it will give two primes, n will not be included in the result.\n\nLet's see some cases:\n```python\nprime_bef_aft(100) == [97, 101]\n\nprime_bef_aft(97) == [89, 101]\n\nprime_bef_aft(101) == [97, 103]\n```\nRange for the random tests: \n```1000 <= n <= 200000```\n\n(The extreme and special case n = 2 will not be considered for the tests. Thanks Blind4Basics)\n\nHappy coding!!",
    "input_output": {
        "fn_name": "prime_bef_aft",
        "inputs": [
            [
                3
            ],
            [
                4
            ],
            [
                100
            ],
            [
                97
            ],
            [
                101
            ],
            [
                120
            ],
            [
                130
            ]
        ],
        "outputs": [
            [
                [
                    2,
                    5
                ]
            ],
            [
                [
                    3,
                    5
                ]
            ],
            [
                [
                    97,
                    101
                ]
            ],
            [
                [
                    89,
                    101
                ]
            ],
            [
                [
                    97,
                    103
                ]
            ],
            [
                [
                    113,
                    127
                ]
            ],
            [
                [
                    127,
                    131
                ]
            ]
        ]
    },
    "url": "https://www.codewars.com/kata/560b8d7106ede725dd0000e2",
    "difficulty": "introductory",
    "starter_code": "def prime_bef_aft(num):\n\t"
}