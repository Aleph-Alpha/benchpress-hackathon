{
    "problem_id": 2881,
    "question": "In this Kata, you will implement the [Luhn Algorithm](http://en.wikipedia.org/wiki/Luhn_algorithm), which is used to help validate credit card numbers.\n\nGiven a positive integer of up to 16 digits, return ```true``` if it is a valid credit card number, and ```false``` if it is not.\n\nHere is the algorithm:\n  \n* Double every other digit, scanning **from right to left**, starting from the second digit (from the right).\n\n  Another way to think about it is: if there are an **even** number of digits, double every other digit starting with the **first**; if there are an **odd** number of digits, double every other digit starting with the **second**:\n\n  ```\n  1714 ==> [1*, 7, 1*, 4] ==> [2, 7, 2, 4]\n  \n  12345 ==> [1, 2*, 3, 4*, 5] ==> [1, 4, 3, 8, 5]\n  \n  891 ==> [8, 9*, 1] ==> [8, 18, 1]\n  ```\n\n*  If a resulting number is greater than `9`, replace it with the sum of its own digits (which is the same as subtracting `9` from it):\n\n  ```\n  [8, 18*, 1] ==> [8, (1+8), 1] ==> [8, 9, 1]\n  \n  or:\n  \n  [8, 18*, 1] ==> [8, (18-9), 1] ==> [8, 9, 1]\n  ```\n  \n* Sum all of the final digits:\n\n  ```\n  [8, 9, 1] ==> 8 + 9 + 1 = 18\n  ```\n\n* Finally, take that sum and divide it by `10`.  If the remainder equals zero, the original credit card number is valid.\n    ```\n    18 (modulus) 10 ==> 8 , which is not equal to 0, so this is not a valid credit card number\n    ```\n\n```if:fsharp,csharp\nFor F# and C# users:\n\nThe input will be a string of spaces and digits `0..9`\n\n```",
    "input_output": {
        "fn_name": "validate",
        "inputs": [
            [
                123
            ],
            [
                1
            ],
            [
                2121
            ],
            [
                1230
            ],
            [
                8675309
            ],
            [
                4111111111111111
            ],
            [
                26
            ],
            [
                2626262626262626
            ],
            [
                91
            ],
            [
                92
            ],
            [
                912030
            ],
            [
                922030
            ]
        ],
        "outputs": [
            [
                false
            ],
            [
                false
            ],
            [
                true
            ],
            [
                true
            ],
            [
                false
            ],
            [
                true
            ],
            [
                true
            ],
            [
                true
            ],
            [
                true
            ],
            [
                false
            ],
            [
                true
            ],
            [
                false
            ]
        ]
    },
    "url": "https://www.codewars.com/kata/5418a1dd6d8216e18a0012b2",
    "difficulty": "introductory",
    "starter_code": "def validate(n):\n\t"
}