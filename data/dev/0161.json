{
    "problem_id": 3682,
    "question": "# Task\n You are given two string `a` an `s`. Starting with an empty string we can do the following two operations:\n```\nappend the given string a to the end of the current string.\nerase one symbol of the current string.```\nYour task is to find the least number of operations needed to construct the given string s. Assume that all the letters from `s` appear in `a` at least once.\n\n# Example\n\n For `a = \"aba\", s = \"abbaab\"`, the result should be `6`.\n \n Coinstruction:\n \n `\"\" -> \"aba\" -> \"ab\" -> \"ababa\" -> \"abba\" -> \"abbaaba\" -> \"abbaab\".`\n \n So, the result is 6.\n\n For `a = \"aba\", s = \"a\"`, the result should be `3`.\n \n Coinstruction:\n \n `\"\" -> \"aba\" -> \"ab\" -> \"a\".`\n \n So, the result is 3.\n\n For `a = \"aba\", s = \"abaa\"`, the result should be `4`.\n \n Coinstruction:\n \n `\"\" -> \"aba\" -> \"abaaba\" -> \"abaab\" -> \"abaa\".`\n \n So, the result is 4.\n\n# Input/Output\n\n\n - `[input]` string `a`\n\n  string to be appended. Contains only lowercase English letters. \n  \n  1 <= a.length <= 20\n\n\n - `[input]` string `s`\n\n  desired string containing only lowercase English letters.\n  \n  1 <= s.length < 1000\n\n\n - `[output]` an integer\n\n  minimum number of operations",
    "input_output": {
        "fn_name": "string_constructing",
        "inputs": [
            [
                "aba",
                "abbabba"
            ],
            [
                "aba",
                "abaa"
            ],
            [
                "aba",
                "a"
            ],
            [
                "a",
                "a"
            ],
            [
                "a",
                "aaa"
            ],
            [
                "abcdefgh",
                "hgfedcba"
            ]
        ],
        "outputs": [
            [
                9
            ],
            [
                4
            ],
            [
                3
            ],
            [
                1
            ],
            [
                3
            ],
            [
                64
            ]
        ]
    },
    "url": "https://www.codewars.com/kata/58a3a735cebc0630830000c0",
    "difficulty": "introductory",
    "starter_code": "def string_constructing(a, s):\n\t"
}