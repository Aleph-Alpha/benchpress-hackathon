{
    "problem_id": 2756,
    "question": "The number `1035` is the smallest integer that exhibits a non frequent property: one its multiples, `3105 = 1035 * 3`, has its same digits but in different order, in other words, `3105`, is one of the permutations of `1035`.\n\nThe number `125874` is the first integer that has this property when the multiplier is `2`, thus: `125874 * 2 = 251748`\n\nMake the function `search_permMult()`, that receives an upper bound, nMax and a factor k and will output the amount of pairs bellow nMax that are permuted when an integer of this range is multiplied by `k`. The pair will be counted if the multiple is less than `nMax`, too\n\nLet'see some cases:\n```python\nsearch_permMult(10000, 7) === 1 # because we have the pair 1359, 9513\nsearch_permMult(5000, 7) === 0 # no pairs found, as 9513 > 5000\n\nsearch_permMult(10000, 4) === 2 # we have two pairs (1782, 7128) and (2178, 8712)\nsearch_permMult(8000, 4) === 1 # only the pair (1782, 7128) \n\nsearch_permMult(5000, 3) === 1 # only the pair (1035, 3105)\nsearch_permMult(10000, 3) === 2 # found pairs (1035, 3105) and (2475, 7425)\n```\nFeatures of the random Tests:\n```\n10000 <= nMax <= 100000\n3 <= k <= 7\n```\nEnjoy it and happy coding!!",
    "input_output": {
        "fn_name": "search_permMult",
        "inputs": [
            [
                10000,
                7
            ],
            [
                5000,
                7
            ],
            [
                10000,
                4
            ],
            [
                8000,
                4
            ],
            [
                5000,
                3
            ],
            [
                10000,
                3
            ]
        ],
        "outputs": [
            [
                1
            ],
            [
                0
            ],
            [
                2
            ],
            [
                1
            ],
            [
                1
            ],
            [
                2
            ]
        ]
    },
    "url": "https://www.codewars.com/kata/55f1a53d9c77b0ed4100004e",
    "difficulty": "introductory",
    "starter_code": "def search_permMult(nMax, k):\n\t"
}