{
    "problem_id": 4424,
    "question": "# Task\n\n* **_Given_** *three integers* `a` ,`b` ,`c`, **_return_** *the **_largest number_** obtained after inserting the following operators and brackets*: `+`, `*`, `()`\n* In other words , **_try every combination of a,b,c with [*+()] , and return the Maximum Obtained_**\n___\n# Consider an Example :\n\n**_With the numbers are 1, 2 and 3_** , *here are some ways of placing signs and brackets*:\n\n* `1 * (2 + 3) = 5`\n* `1 * 2 * 3 = 6`\n* `1 + 2 * 3 = 7`\n* `(1 + 2) * 3 = 9`\n\nSo **_the maximum value_** that you can obtain is  **_9_**.\n\n___\n# Notes \n\n* **_The numbers_** *are always* **_positive_**. \n* **_The numbers_** *are in the range* **_(1\u2009 \u2264\u2009 a,\u2009b,\u2009c\u2009 \u2264\u2009 10)_**.\n* *You can use the same operation* **_more than once_**.\n* **It's not necessary** *to place all the signs and brackets*.\n* **_Repetition_** *in numbers may occur* .\n* You **_cannot swap the operands_**. For instance, in the given example **_you cannot get expression_** `(1 + 3) * 2 = 8`.\n\n___\n# Input >> Output Examples:\n\n```\nexpressionsMatter(1,2,3)  ==>  return 9\n```\n## **_Explanation_**:\n*After placing signs and brackets, the **_Maximum value_** obtained from the expression* `(1+2) * 3 = 9`.\n___\n\n```\nexpressionsMatter(1,1,1)  ==>  return 3\n```\n## **_Explanation_**:\n*After placing signs, the **_Maximum value_** obtained from the expression is* `1 + 1 + 1 = 3`.\n___\n\n```\nexpressionsMatter(9,1,1)  ==>  return 18\n```\n## **_Explanation_**:\n*After placing signs and brackets, the **_Maximum value_** obtained from the expression is* `9 * (1+1) = 18`.\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou",
    "input_output": {
        "fn_name": "expression_matter",
        "inputs": [
            [
                2,
                1,
                2
            ],
            [
                2,
                1,
                1
            ],
            [
                1,
                1,
                1
            ],
            [
                1,
                2,
                3
            ],
            [
                1,
                3,
                1
            ],
            [
                2,
                2,
                2
            ],
            [
                5,
                1,
                3
            ],
            [
                3,
                5,
                7
            ],
            [
                5,
                6,
                1
            ],
            [
                1,
                6,
                1
            ],
            [
                2,
                6,
                1
            ],
            [
                6,
                7,
                1
            ],
            [
                2,
                10,
                3
            ],
            [
                1,
                8,
                3
            ],
            [
                9,
                7,
                2
            ],
            [
                1,
                1,
                10
            ],
            [
                9,
                1,
                1
            ],
            [
                10,
                5,
                6
            ],
            [
                1,
                10,
                1
            ]
        ],
        "outputs": [
            [
                6
            ],
            [
                4
            ],
            [
                3
            ],
            [
                9
            ],
            [
                5
            ],
            [
                8
            ],
            [
                20
            ],
            [
                105
            ],
            [
                35
            ],
            [
                8
            ],
            [
                14
            ],
            [
                48
            ],
            [
                60
            ],
            [
                27
            ],
            [
                126
            ],
            [
                20
            ],
            [
                18
            ],
            [
                300
            ],
            [
                12
            ]
        ]
    },
    "url": "https://www.codewars.com/kata/5ae62fcf252e66d44d00008e",
    "difficulty": "introductory",
    "starter_code": "def expression_matter(a, b, c):\n\t"
}